name: CI Pipeline (Develop)

on:
  push:
    branches: [develop]
  pull_request:
    branches: [develop]

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      VITE_KEYCLOAK_URL: "http://20.244.102.185:9000"
      VITE_KEYCLOAK_REALM: "ims"
      VITE_KEYCLOAK_CLIENT_ID: "ims-client"
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run unit tests
        run: npm test

  azureVM:
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Start Azure VM
        run: |
          az vm start --resource-group demo-pipelining_group --name demo-pipelining

  sonarcloud:
    runs-on: ubuntu-latest
    needs: [azureVM]
    steps:
      - name: Start SonarQube and PostgreSQL on Azure VM
        run: |
          mkdir -p ~/.ssh
          echo "$AZURE_SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no demopipelining@40.82.200.144 \
            "sudo systemctl start postgresql && \
             sudo systemctl start sonarqube && \
             echo 'Waiting for SonarQube to become ready...' && \
             until curl -sSf --retry 12 --retry-all-errors --retry-delay 10 http://localhost:9000/api/system/status | grep -q '"UP"'; do \
               sleep 10; \
             done"
        env:
          AZURE_SSH_PRIVATE_KEY: ${{ secrets.AZURE_SSH_PRIVATE_KEY }}
      
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20.x

      - name: Install SonarScanner
        run: |
          wget "https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip"
          unzip sonar-scanner-cli-5.0.1.3006-linux.zip
          sudo mv sonar-scanner-5.0.1.3006-linux /opt/sonar-scanner
          echo "/opt/sonar-scanner/bin" >> $GITHUB_PATH
      
      - name: Run Sonar Scanner
        run: |
          sonar-scanner -D"sonar.projectKey=demo-pipeline" \
                        -D"sonar.sources=." \
                        -D"sonar.host.url=http://40.82.200.144:9000" \
                        -D"sonar.login=${{ secrets.SONAR_TOKEN }}"

  dependency-track:
    runs-on: ubuntu-latest
    needs: [azureVM]
    steps:
      - uses: actions/checkout@v4

      - name: Install Node.js dependencies
        run: npm ci

      - name: Install CycloneDX
        run: npm install -g @cyclonedx/cyclonedx-npm

      - name: Generate SBOM 
        run: cyclonedx-npm --output-format xml --output-file bom.xml

      - name: Upload SBOM to Dependency-Track
        uses: DependencyTrack/gh-upload-sbom@v3
        with:
          serverHostname: '40.82.200.144'
          port: ${{ secrets.DTRACK_PORT }}
          protocol: ${{ secrets.DTRACK_PROTOCOL }}
          apiKey: ${{ secrets.DTRACK_API_KEY }}
          project: ${{ secrets.PROJECT_ID }}
          projectName: 'demopipeline-frontend'
          projectVersion: '1.0'
          bomFilename: "bom.xml"

  azurevm-stop:
    runs-on: ubuntu-latest
    needs: [sonarcloud,dependency-track]
    steps:
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Stop Azure VM
        if: always()
        run: |
          az vm deallocate --resource-group demo-pipelining_group --name demo-pipelining
          
  deploy-test:
    runs-on: ubuntu-latest
    needs: [azurevm-stop]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up SSH for Azure VM
        run: |
          mkdir -p ~/.ssh
          echo "$AZURE_SSH_FRONTEND_KEY" > ~/.ssh/id_rsa_azure
          chmod 600 ~/.ssh/id_rsa_azure
          ssh-keyscan -H ${{ secrets.AZURE_VM_IP }} >> ~/.ssh/known_hosts
        env:
          AZURE_SSH_FRONTEND_KEY: ${{ secrets.AZURE_SSH_FRONTEND_KEY }}

      - name: Clone Frontend Repo
        env:
          AZURE_SSH_FRONTEND_KEY: ${{ secrets.AZURE_SSH_FRONTEND_KEY }}
          AZURE_VM_USERNAME: ${{ secrets.AZURE_VM_USERNAME }}
          AZURE_VM_IP: ${{ secrets. AZURE_VM_IP }}
        run: |
          mkdir -p ~/.ssh
          echo "$AZURE_SSH_FRONTEND_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ secrets.AZURE_VM_USERNAME }}@${{ secrets.AZURE_VM_IP }} \
            "cd .ssh/ && \
             rm -rf config && \
             cd ../ && \
             chmod 600 ~/.ssh/id_rsa && \
             echo -e 'Host github.com\n  HostName github.com\n  IdentityFile ~/.ssh/id_rsa' >> ~/.ssh/config && \
             git clone git@github.com:${{ github.repository }}.git test || \
             (cd test && git pull origin develop)"
             
  start_frontend_test_server:
    runs-on: ubuntu-latest
    needs: [deploy-test]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Start Frontend
        env:
          AZURE_SSH_FRONTEND_KEY: ${{ secrets.AZURE_SSH_FRONTEND_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "$AZURE_SSH_FRONTEND_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ secrets.AZURE_VM_USERNAME }}@${{ secrets.AZURE_VM_IP }} \
            "cd test && \
             git pull origin develop && \
             npm install && \
             nohup npm run dev -- --host --port 8081 > frontend.log 2>&1 & echo \$! > frontend.pid && \
             exit 0" &
      - name: Wait for Frontend to be Available
        run: |
          until curl -s http://${{ secrets.AZURE_VM_IP }}:8081 >/dev/null; do
            echo "Waiting for frontend..."
            sleep 5
          done
